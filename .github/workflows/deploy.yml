name: Terragrunt Deploy

on:
  push:
    branches:
      - dev
      - integration
      - prod
    paths:
      - 'src/**'

jobs:
  deploy:
    name: Deploy Environment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}   # Set the secret as an environment variable
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::922858306127:role/GitHubActionsRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform and Terragrunt
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -Lo terraform.zip https://releases.hashicorp.com/terraform/1.11.2/terraform_1.11.2_linux_amd64.zip
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.76.6/terragrunt_linux_amd64
          chmod +x terragrunt && sudo mv terragrunt /usr/local/bin/

      - name: Determine Environment
        id: set-env
        run: |
          # Extract branch name from GITHUB_REF (e.g., refs/heads/dev becomes dev)
          ENVIRONMENT=$(echo ${GITHUB_REF#refs/heads/})
          echo "Environment detected: $ENVIRONMENT"
          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Deploy Environment Components
        run: |
          ENVIRONMENT=${{ steps.set-env.outputs.env }}
          echo "Deploying environment components from src/envs/${ENVIRONMENT}/components"
          terragrunt run-all init --non-interactive --working-dir "src/envs/${ENVIRONMENT}/components"
          terragrunt run-all apply --non-interactive --parallelism=1 --working-dir "src/envs/${ENVIRONMENT}/components"
